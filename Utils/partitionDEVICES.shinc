#
# partitionDEVICES.shinc   <-- called by ../setup.sh
#-----------------------
# AFTER RUNNING lsblk output resembles:
# sdh                   8:112  0   1.8T  0 disk 
# └─sdh1                8:113  0   100G  0 part /mnt/hdd0
# sdi                   8:128  0   1.8T  0 disk 
# └─sdi1                8:129  0   100G  0 part /mnt/hdd1
# sdj                   8:144  0   1.8T  0 disk 
# └─sdj1                8:145  0   100G  0 part /mnt/hdd2
#
# nvme0n1               259:0    0 372.6G  0 disk 
# ├─nvme0n1p1           259:1    0   120G  0 part 
# ├─nvme0n1p2           259:2    0   120G  0 part 
# └─nvme0n1p3           259:3    0   120G  0 part 
# └─nvme0n1p4           259:4    0     1K  0 part 
# └─nvme0n1p5           259:5    0    12G  0 part 
# └─nvme0n1p6           259:6    0    12G  0 part 
# └─nvme0n1p7           259:7    0    12G  0 part 
# 
# sde                     8:64   0   1.8T  0 disk 
# sdf                     8:80   0   1.8T  0 disk 
# sdg                     8:96   0   1.8T  0 disk 
#
# Based on: https://superuser.com/questions/332252/
#
###############################################################

# DEBUG
#LOGFILE="./HOLDlog"
#fastDEV="nvme0n1"
#fastTARGET="/dev/${fastDEV}"
# end DEBUG

# First - do the 'xfshdd' HDDs
#
for xfshdd in "${hddDEV_arr[@]}"; do
  echo "Partitioning $xfshdd" | tee -a $LOGFILE
  echo "BEGIN: Listing matching device names"
  # List the available block devices
  lsblk | grep $xfshdd
  sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOFxfshdd | fdisk ${xfshdd}
    o       # clear the in memory partition table
    n       # new partition
    p       # primary partition
    1       # partition number 1
            # default, start at beginning of disk 
    +100G   # 100 GB partition
    p       # print the in-memory partition table
    w       # write the partition table
    q       # and we're done
EOFxfshdd
  echo "COMPLETED partitioning $xfshdd" | tee -a $LOGFILE
done

#----------------------------------
# Second - do the NVME
echo "Partitioning $fastTARGET" | tee -a $LOGFILE
echo "BEGIN: Listing matching device names"
# List the available block devices
lsblk | grep $fastDEV | tee -a $LOGFILE

# Create the partitions programatically (rather than manually)
# The sed script strips off all the comments so that we can 
# document what we're doing in-line with the actual commands
# Note that a blank line (commented as "default" will send a empty
# line terminated with a newline to take the fdisk default.
sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk ${fastTARGET}
  o       # clear the in memory partition table
  n       # new partition
  p       # primary partition
  1       # partition number 1
          # default, start at beginning of disk 
  +100G   # 100 GB partition
  n       # new partition
  p       # primary partition
  2       # partition number 2
          # default, start immediately after preceding partition
  +100G   # 100 GB partition
  n       # new partition
  p       # primary partition
  3       # partition number 3
          # default, start immediately after preceeding partition
  +100G   # 100 GB partition
  n       # new partition
  e       # extended partition
  4       # partition number 4 : extended partition
          # default, start immediately after preceeding partition
  +50G    # 50 GB partition (to house remaining three partitions)
  n       # new partition 'p5'
          # default, start immediately after preceeding partition
  +12G    # 12 GB partition (10G padded)
  n       # new partition 'p6'
          # default, start immediately after preceeding partition
  +12G    # 12 GB partition (10G padded)
  n       # new partition 'p7'
          # default, start immediately after preceeding partition
  +12G    # 12 GB partition (10G padded)
  p       # print the in-memory partition table
  w       # write the partition table
  q       # and we're done
EOF

echo "COMPLETED partitioning $fastDEV" | tee -a $LOGFILE
lsblk | grep $fastDEV | tee -a $LOGFILE

#----------------------------------
# Third - do the LVMcached HDDs  <-- NOT REQUIRED
#
#for hdd in "${slowDEV_arr[@]}"; do
#  echo "Partitioning $hdd" | tee -a $LOGFILE
#  echo "BEGIN: Listing matching device names"
#  # List the available block devices
#  lsblk | grep $hdd
#  sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF2 | fdisk ${hdd}
#    o       # clear the in memory partition table
#    n       # new partition
#    p       # primary partition
#    1       # partition number 1
#            # default, start at beginning of disk 
#    +120G   # 100 GB partition
#    p       # print the in-memory partition table
#    w       # write the partition table
#    q       # and we're done
#EOF2
#  echo "COMPLETED partitioning $hdd" | tee -a $LOGFILE
#done

echo "COMPLETED partitioning all devices" | tee -a $LOGFILE

